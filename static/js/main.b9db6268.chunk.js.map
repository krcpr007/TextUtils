{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","herf","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","backgroundColor","color","heading","value","onChange","event","target","rows","newText","toUpperCase","length","showAlert","replace","toLowerCase","navigator","clipboard","writeText","document","getElementById","split","filter","element","prototype","PropTypes","string","isRequired","Alert","alert","role","word","lower","charAt","slice","captilize","msg","App","setmode","setAlert","message","setTimeout","body","modeText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b9db6268.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n// import { link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" herf=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\"  herf=\"#\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" herf=\"#\">About</a>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-dark\" type=\"submit\">Search</button>\r\n            </form> */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n              <label className={`form-check-label` } htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode === 'light'?'DarkMode':'LightMode'} </label>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n      )\r\n}\r\n      Navbar.prototype={\r\n        title : PropTypes.string.isRequired\r\n\r\n}\r\n","// import React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('Enter text here');\r\n\r\n    const handleUpClick = () => {\r\n        // console.log(\"clicked1\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        if (text.length > 0) {\r\n            props.showAlert(\"Converted to UpperCase \", \"success !! \");\r\n\r\n        } else {\r\n            props.showAlert(\"Enter text first \", \"warning !! \");\r\n\r\n        }\r\n    }\r\n    const handleLoClick = () => {\r\n        // console.log(\"clicked1\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        if (text.length > 0) {\r\n            props.showAlert(\"Converted to LowerCase \", \"success !! \");\r\n\r\n        } else {\r\n            props.showAlert(\"Enter text first \", \"warning !! \");\r\n\r\n        }\r\n\r\n    }\r\n    const handleTrim = () => {\r\n        let newText = text.replace(/\\s+/g, ' ');;\r\n        setText(newText);\r\n        if (text.length > 0) {\r\n            props.showAlert(\"Converted to trim text \", \"success !! \");\r\n\r\n        } else {\r\n            props.showAlert(\"Enter text first \", \"warning !! \");\r\n        }\r\n\r\n\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\");\r\n        setText(event.target.value)\r\n    }\r\n    const handleCopy = () => {\r\n    //    let  text = document.getElementById(\"mybox\");\r\n    //     text.select();\r\n    if (text.length > 0) {\r\n        props.showAlert(\"Copy  to clipboard \", \"success !! \");\r\n        \r\n\r\n\r\n    } else {\r\n        props.showAlert(\"Enter text first \", \"warning !! \");\r\n\r\n    }\r\n        navigator.clipboard.writeText(text);\r\n\r\n        \r\n\r\n    }\r\n    const clearText = () => {\r\n        \r\n        var text = document.getElementById(\"mybox\");\r\n        text.value = \"\";\r\n        // props.showAlert(\"Text cleared\", \"success !! \");\r\n\r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ backgroundColor: props.mode === 'dark' ? '#042743' : 'white', color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    {/* <label for=\"mybox\" class=\"form-label\">Your text goes here </label> */}\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? '#0d1e35' : 'white', color: props.mode === 'dark' ? 'white' : '#042743' }} id=\"mybox\" rows=\"8\"> </textarea>\r\n\r\n                </div>\r\n                <button className=\"btn btn-sm btn-outline-primary m-1\" onClick={handleUpClick}>Conevert to uperCase</button>\r\n                <button className=\"btn btn-sm btn-outline-success m-1\" onClick={handleTrim}>Trim space</button>\r\n                <button className=\"btn btn-sm btn-outline-info m-1 \" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-sm btn-outline-warning m-1 \" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-sm btn-outline-danger m-1 \" onClick={clearText}>Clear Text</button>\r\n                <div className=\"container my-2\" style={{ backgroundColor: props.mode === 'dark' ? '#042743' : 'white' }}>\r\n                    <h1>Your result </h1>\r\n                    <p className=\"text-primary\"> <b> {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</b></p>\r\n                    <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n                    <h3  >Preview</h3>\r\n                    <p className=\"text-info\" >{text.length > 0 ? text : 'Enter your text to preview it here'}</p>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\nTextForm.prototype = {\r\n    heading: PropTypes.string.isRequired\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n     const captilize = (word) =>{\r\n         const lower = word.toLowerCase(); \r\n         return lower.charAt(0).toUpperCase() + lower.slice(1) ; \r\n     }\r\n    return (\r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {/* <strong>Holy guacamole!</strong> You should check in on some of those fields below.\r\n             */}\r\n             <strong>{captilize(props.alert.type)}</strong>{props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\n// import About from './components/About';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   // useRouteMatch,\n//   // useParams\n// } from \"react-router-dom\";\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode has been enabled\", \"success !! \");\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\", \"success !! \");\n\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} modeText=\"DarkMode\" />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>  */}\n          {/* <Route exact path=\"/about\">\n        <About mode={mode} toggleMode={toggleMode} />\n            \n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter text\" mode={mode} />\n          {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* // </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}